from urllib.request import urlretrieve
from Codes import config
import json
import requests
import os
import shutil
import re


def generate_download_links(cve, cve_detail, github_response):
    files = github_response["files"]
    for file in files:
        filename = file["filename"]
        if re.search(r"\.c$", filename) or re.search(r"\.cpp$", filename):
            commit_link = ("https://raw.githubusercontent.com/{}/{}/{}/{}".format(
                cve_detail[0], cve_detail[1], cve_detail[2], filename
            ))

            commit_parent_link = ("https://raw.githubusercontent.com/{}/{}/{}/{}".format(
                cve_detail[0], cve_detail[1], github_response["parents"][0]["sha"],
                filename
            ))

            return commit_link, commit_parent_link


def download_file_content(cve, cve_detail, github_response):
    commit_download_link, commit_parent_download_link = generate_download_links(cve, cve_detail, github_response)

    print(commit_download_link)
    print(commit_parent_download_link)

    if os.path.exists(config.FINAL_DATASET_FOLDER + cve):
        shutil.rmtree(config.FINAL_DATASET_FOLDER + cve)
    os.mkdir(config.FINAL_DATASET_FOLDER + cve)

    filename = f"{config.FINAL_DATASET_FOLDER}/{cve}/" + "pre.c"
    urlretrieve(commit_download_link, filename)

    filename = f"{config.FINAL_DATASET_FOLDER}/{cve}/" + "post.c"
    urlretrieve(commit_parent_download_link, filename)


def get_github_api_diff(cve_to_github_link):
    headers = {"Accept": "application/vnd.github+json", "Authorization": "Bearer " + config.GITHUB_TOKEN}
    for cve in cve_to_github_link:
        github_owner, github_repo, github_commit_hash = cve_to_github_link[cve]
        github_api = "https://api.github.com/repos/{}/{}/commits/{}".format(
            github_owner, github_repo, github_commit_hash
        )
        print(cve)
        print(github_api)
        response = requests.get(github_api, headers=headers)
        if response.status_code == 200:
            download_file_content(cve, cve_to_github_link[cve], response.json())
        else:
            print(f"##################################\n{response.json()}\n##################################")


def get_final_cves():
    final_cves_detail = {}
    with open("../datasets/accepted_cves.txt", "r") as final_cves_file:
        data = final_cves_file.readlines()
        final_cves = [line.rstrip("\n") for line in data]
        final_cves_file.close()
    with open("../datasets/all_result.json", "r") as dataset_file:
        dataset_json = json.load(dataset_file)
        for cve in final_cves:
            if cve in dataset_json:
                github_owner = dataset_json[cve]["owner"]
                github_repo = dataset_json[cve]["repo-name"]
                github_commit_hash = dataset_json[cve]["commit-hash"][:40]
                final_cves_detail[cve] = (github_owner, github_repo, github_commit_hash)
    return final_cves_detail


if __name__ == "__main__":
    final_cves = get_final_cves()
    get_github_api_diff(final_cves)
