import re
from Codes import config
import json
import requests
import subprocess


def get_start_line_number_of_function(file_path, function_name):
    found = False
    cmd = "ctags -x --c-kinds=fp " + file_path + " | grep " + function_name

    output = subprocess.getoutput(cmd)
    lines = output.splitlines()

    for line in lines:
        line_split = line.split(" ")
        if re.search(line_split[0], function_name):
            found = True

            if output.strip() != "":
                output = output.split(" ")
                lines = list(filter(None, output))
                line_num = lines[2]

                print("Function found in file " + file_path + " on line: " + line_num)
                return int(line_num)
    if not found:
        raise


def get_edited_function_body_in_diff(file_path, function_name):
    start_line_num = get_start_line_number_of_function(file_path, function_name)

    if start_line_num > 0:
        code = ""
        cnt_braket = 0
        found_start = False
        found_end = False
        with open(file_path, "rb") as f:
            for i, line in enumerate(f):
                if i >= (start_line_num - 1):
                    line = line.decode()
                    code += line
                    if line.count("{") > 0:
                        found_start = True
                        cnt_braket += line.count("{")

                    if line.count("}") > 0:
                        cnt_braket -= line.count("}")

                    if cnt_braket == 0 and found_start:
                        found_end = True
                        f.close()
                        return code
    raise


def get_edited_function_name(github_api_response):
    files = github_api_response["files"]
    for file in files:
        filename = file["filename"]
        if re.search(r"\.c$", filename) or re.search(r"\.cpp$", filename):
            patch = file["patch"]
            edited_functions = re.findall(r"@@.*?@@ .*\(", patch)
            if len(edited_functions) != 0:
                return edited_functions[0]


def create_file_of_function_body(cve, github_api_response):
    function_in_diff = get_edited_function_name(github_api_response)
    if function_in_diff is None:
        return
    names = re.findall("\S+", function_in_diff)
    function_name = names[-1][:-1] if names[-1] != "(" else names[-2]
    pre_patch_path = f"{config.FINAL_DATASET_FOLDER}/{cve}/pre.c"
    post_patch_path = f"{config.FINAL_DATASET_FOLDER}/{cve}/post.c"

    print("going to check pre")
    with open(f"{config.FINAL_DATASET_FOLDER}/{cve}/pre_patch_function_body.c", "w") as file:
        body = get_edited_function_body_in_diff(pre_patch_path, function_name)
        file.write(body)
        file.close()

    print("going to check post")
    with open(f"{config.FINAL_DATASET_FOLDER}/{cve}/post_patch_function_body.c", "w") as file:
        body = get_edited_function_body_in_diff(post_patch_path, function_name)
        file.write(body)
        file.close()


def get_github_api_diff(cve_to_github_link):
    headers = {"Accept": "application/vnd.github+json", "Authorization": "Bearer " + config.GITHUB_TOKEN}
    for cve in cve_to_github_link:
        try:
            github_owner, github_repo, github_commit_hash = cve_to_github_link[cve]
            github_api = "https://api.github.com/repos/{}/{}/commits/{}".format(
                github_owner, github_repo, github_commit_hash
            )
            print(cve)
            print(github_api)
            response = requests.get(github_api, headers=headers)
            if response.status_code == 200:
                create_file_of_function_body(cve, response.json())
            else:
                raise
        except Exception as e:
            print(f"##################################\n{cve}\n##################################")
            print(e)
            file = open("aha.txt", "a")
            file.write(cve + "\n")
            file.close()


def get_final_cves():
    final_cves_detail = {}
    with open("../datasets/accepted_cves.txt", "r") as final_cves_file:
        data = final_cves_file.readlines()
        final_cves = [line.rstrip("\n") for line in data]
        final_cves_file.close()
    with open("../datasets/all_result.json", "r") as dataset_file:
        dataset_json = json.load(dataset_file)
        for index, cve in enumerate(final_cves):
            if cve in dataset_json:
                github_owner = dataset_json[cve]["owner"]
                github_repo = dataset_json[cve]["repo-name"]
                github_commit_hash = dataset_json[cve]["commit-hash"][:40]
                final_cves_detail[cve] = (github_owner, github_repo, github_commit_hash)
    return final_cves_detail


if __name__ == "__main__":
    final_data = get_final_cves()
    get_github_api_diff(final_data)
