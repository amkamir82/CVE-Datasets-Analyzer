import re
import json
import config
import requests

check = False


def write_to_file(data):
    with open(config.ACCEPTED_CVES, "a") as f:
        f.write(data)
        f.close()


def count_edited_functions_in_diff(cve, github_api_response):
    files = github_api_response["files"]
    for file in files:
        filename = file["filename"]
        if re.search(r"\.c$", filename) or re.search(r"\.cpp$", filename):
            if "patch" not in file:
                continue
            patch = file["patch"]
            edited_functions = re.findall(r"@@.*?@@ .*\n", patch)
            print("Edited functions: {}".format(len(edited_functions)))
            if len(edited_functions) == 1:
                write_to_file(cve + "\n")
                break


def count_c_or_cpp_files(cve, github_api_response):
    c_file_count = 0
    cpp_file_count = 0
    files = github_api_response["files"]
    for file in files:
        filename = file["filename"]
        if re.search(r"\.c$", filename):
            c_file_count += 1
        elif re.search(r"\.cpp$", filename):
            cpp_file_count += 1

    if c_file_count > 1:
        print("C file count for #{}: {}".format(cve, c_file_count))

    if cpp_file_count > 1:
        print("C++ file count for #{}: {}".format(cve, cpp_file_count))

    if (c_file_count == 1 and cpp_file_count == 0) or (c_file_count == 0 and cpp_file_count == 1):
        count_edited_functions_in_diff(cve, github_api_response)


def get_github_api_diff(cve_to_github_link):
    headers = {"Accept": "application/vnd.github+json", "Authorization": "Bearer " + config.GITHUB_TOKEN}
    for cve in cve_to_github_link:
        github_owner, github_repo, github_commit_hash = cve_to_github_link[cve]
        github_api = "https://api.github.com/repos/{}/{}/commits/{}".format(
            github_owner, github_repo, github_commit_hash
        )
        print(github_api)
        response = requests.get(github_api, headers=headers)
        if response.status_code == 200:
            count_c_or_cpp_files(cve, response.json())
        else:
            print(f"##################################\n{response.json()}\n##################################")


def convert_json_to_list_of_commit_hash_with_cve(dataset_json):
    global check
    cve_to_github_link = {}
    for data in dataset_json:
        github_owner = dataset_json[data]["owner"]
        github_repo = dataset_json[data]["repo-name"]
        github_commit_hash = dataset_json[data]["commit-hash"][:40]
        if str(github_commit_hash) == "16fb63384c1da5a132468670f83fbcc8fc7aa99d":
            check = True
        if not check:
            continue
        cve_to_github_link[data] = (github_owner, github_repo, github_commit_hash)
    return cve_to_github_link


def main():
    dataset_file = open(config.DATASET_PATH, "r")
    dataset_json = json.load(dataset_file)
    get_github_api_diff(convert_json_to_list_of_commit_hash_with_cve(dataset_json))


if __name__ == "__main__":
    main()
